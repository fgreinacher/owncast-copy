openapi: 3.1.0

info:
  version: 0.1.2
  title: Owncast APIs
  description: |-
    Internal
    The APIs required to make the Owncast web interface and internal functionality work. These APIs will never reach stability and will always change as Owncast features and functionality change. This means these endpoints are not good options to build your own tooling and features on top of. You can, however, of course can if that risk is acceptable to you.

    Admin
    The APIs used to configure the Owncast server, as well as power the web admin interface. These APIs are protected by the admin password, using HTTP Basic authentication. They should not be used by external tools or integrations as it would require you to give your admin password to a third party.
  contact:
    name: Gabe Kangas
    email: gabek@real-ity.com
    url: 'http://owncast.online'
  license:
    url: 'https://github.com/owncast/owncast/blob/develop/LICENSE'
    name: MIT
servers:
  - url: 'http://localhost:8080'
    description: Localhost port 8080

paths:
  /status:
    get:
      summary: Get the status of the server
      operationId: getStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /emoji:
    get:
      summary: Get list of custom emojis supported in the chat
      operationId: getEmoji
      responses:
        '200':
          description: List of valid emojis
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Emojis"
        '500':
          $ref: "#/components/responses/500"
  /chat:
    get:
      summary: Gets a list of chat messages
      operationId: getChatList
      responses:
        '200':
          description: List of chat messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessages"
        '501':
          $ref: "#/components/responses/501"
  /chat/register:
    post:
      summary: Registers an anonymous chat user
      operationId: registerAnonymousChatUser
      parameters:
        - in: header
          name: X-Forwarded-User
          schema:
            type: string
          required: false
      requestBody:
        description: The display name of the new user
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
      responses:
        '200':
          description: Anonymous user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnonymousUser"
        '400':
          $ref: "#/components/responses/400"
    options:
      responses:
        '204':
          $ref: "#/components/responses/204"
  /config:
    get:
      summary: Get the web config
      operationId: getConfig
      responses:
        '200':
          description: The current web config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebConfig"
        '500':
          $ref: "#/components/responses/500"
  /yp:
    get:
      summary: Get the YP protocol data
      operationId: getYP
      responses:
        '200':
          description: The current YP protocol configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/YPDetails"
        '404':
          $ref: "#/components/responses/404"
  /socialplatforms:
    get:
      summary: Get all social platforms
      operationId: getSocialPlatforms
      responses:
        '200':
          description: The list of social platforms
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/SocialHandle'
        '500':
          $ref: "#/components/responses/500"
  /video/variants:
    get:
      summary: Get a list of video variants available
      operationId: getVideoVariants
      responses:
        '200':
          description: List of available video variants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VideoVariant"
  /ping:
    get:
      summary: Tell the backend you're an active viewer
      operationId: ping
      responses:
        '200':
          description: Added as an active viewer
  /remotefollow:
    post:
      summary: Request remote follow
      operationId: remoteFollow
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  type: string
      responses:
        '200':
          description: Contains redirect URL remote follow follow
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirectUrl:
                    type: string
        '400':
          $ref: "#/components/responses/400"
  /followers:
    get:
      summary: Gets the list of followers
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: Paginated follower count
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Follower"
        '400':
          $ref: "#/components/responses/400"
  /metrics/playback:
    post:
      summary: Save video playback metrics for future video health recording
      requestBody:
        description: Video metrics to record
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaybackMetrics"
      responses:
        '200':
          description: Metrics successfully recorded
        '400':
          $ref: "#/components/responses/400"
  /notifications/register:
    post:
      summary: Register for notifications
      parameters:
        - in: query
          name: accessToken
          schema:
            type: string
          required: true
      requestBody:
        description: Information for notification
        content:
          application/json:
            schema:
              type: object
              properties:
                channel:
                  type: string
                  description: Name of notification channel
                destination:
                  type: string
                  description: Target of the notification in the channel
      responses:
        '200':
          description: Successfully added notification channel
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: "#/components/responses/401"
  /admin/status:
    get:
      summary: Get current inboard broadcaster
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Gives the status of the system
          headers:
            'Access-Control-Allow-Origin':
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            'Access-Control-Allow-Credentials':
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            'Access-Control-Allow-Headers':
              $ref: "#/components/headers/Access-Control-Allow-Headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStatus"
        '401':
          $ref: "#/components/responses/401BasicAuth"
  /admin/disconnect:
    get:
      summary: Disconnect inbound stream
      operationId: disconnectInboundConnection
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Contains information about disconnection status
          headers:
            'Access-Control-Allow-Origin':
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            'Access-Control-Allow-Credentials':
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            'Access-Control-Allow-Headers':
              $ref: "#/components/headers/Access-Control-Allow-Headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseAPIResponse"
        '401':
          $ref: "#/components/responses/401BasicAuth"
  /integrations/chat/system:
    post:
      summary: Send a system message to the chat
      operationId: sendSystemMessage
      security:
        - BearerAuth: []
      requestBody:
        description: The content of the system message
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemMessage"
      responses:
        '200':
          description: Message sent successfully
          headers:
            'Access-Control-Allow-Origin':
              $ref: "#/components/headers/Access-Control-Allow-Origin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseAPIResponse"
        '401':
          $ref: "#/components/responses/401"
        '500':
          $ref: "#/components/responses/500"

components:
  schemas:
    Status:
      type: object
      description: Response for status
      properties:
        serverTime:
          type: string
        lastConnectTime:
          type: string
        lastDisconnectTime:
          type: string
        versionNumber:
          type: string
        viewerCount:
          type: integer
        online:
          type: boolean
    Emojis:
      type: array
      items:
        $ref: "#/components/schemas/Emoji"
    Emoji:
      type: object
      description: Name and url for an emoji
      properties:
        name:
          type: string
          description: The name of the emoji
        url:
          type: string
          description: URL for the emoji image
    AnonymousUser:
      type: object
      properties:
        id:
          type: string
        accessToken:
          type: string
        displayName:
          type: string
    User:
      type: object
      properties:
        createdAt:
          type: string
        disabledAt:
          type: string
        nameChangedAt:
          type: string
        id:
          type: string
        displayName:
          type: string
        previousNames:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        displayColor:
          type: integer
        isBot:
          type: boolean
        authenticated:
          type: boolean
    Follower:
      type: object
      properties:
        link:
          type: string
          description: The IRI of the remote actor.
        name:
          type: string
          description: The display name of the follower.
        username:
          type: string
          description: The account username of the remote actor.
        image:
          type: string
          description: The avatar image of the follower.
        timestamp:
          type: string
          description: When this follow request was created.
        disabledAt:
          type: string
          description: When this follower was rejected or disabled.
    Event:
      type: object
      properties:
        timestamp:
          type: string
        type:
          type: string
        id:
          type: string
    UserEvent:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        hiddenAt:
          type: string
        clientId:
          type: integer
    MessageEvent:
      type: object
      properties:
        body:
          type: string
    ChatMessages:
      type: array
      items:
        anyOf:
          - $ref: "#/components/schemas/UserMessage"
          - $ref: "#/components/schemas/SystemMessage"
          - $ref: "#/components/schemas/ActionMessage"
          - $ref: "#/components/schemas/FederatedAction"
    UserMessage:
      type: object
      allOf:
        - $ref: "#/components/schemas/Event"
        - $ref: "#/components/schemas/UserEvent"
        - $ref: "#/components/schemas/MessageEvent"
    SystemMessage:
      type: object
      allOf:
        - $ref: "#/components/schemas/Event"
        - $ref: "#/components/schemas/MessageEvent"
    ActionMessage:
      type: object
      allOf:
        - $ref: "#/components/schemas/Event"
        - $ref: "#/components/schemas/MessageEvent"
    FederatedAction:
      type: object
      allOf:
        - $ref: "#/components/schemas/Event"
        - $ref: "#/components/schemas/MessageEvent"
        - type: object
          properties:
            image:
              type: string
            link:
              type: string
            title:
              type: string
    WebConfig:
      type: object
      properties:
        appearanceVariables:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        customStyles:
          type: string
        streamTitle:
          type: string
        offlineMessage:
          type: string
        logo:
          type: string
        version:
          type: string
        socketHostOverride:
          type: string
        extraPageContent:
          type: string
        summary:
          type: string
        tags:
          type: array
          items:
            type: string
        socialHandles:
          type: array
          items:
            $ref: "#/components/schemas/SocialHandle"
        externalActions:
          type: array
          items:
            $ref: "#/components/schemas/ExternalAction"
        notifications:
          $ref: "#/components/schemas/NotificationConfig"
        federation:
          $ref: "#/components/schemas/FederationConfig"
        maxSocketPayloadSize:
          type: integer
        hideViewerCount:
          type: boolean
        chatDisabled:
          type: boolean
        nsfw:
          type: boolean
        authentication:
          $ref: "#/components/schemas/AuthenticationConfig"
    SocialHandle:
      type: object
      properties:
        platform:
          type: string
        url:
          type: string
        icon:
          type: string
    ExternalAction:
      type: object
      properties:
        url:
          type: string
        html:
          type: string
        title:
          type: string
        description:
          type: string
        icon:
          type: string
        color:
          type: string
        openExternally:
          type: boolean
    NotificationConfig:
      type: object
      properties:
        browser:
          $ref: "#/components/schemas/BrowserConfig"
    BrowserConfig:
      type: object
      properties:
        publicKey:
          type: string
        enabled:
          type: boolean
    FederationConfig:
      type: object
      properties:
        account:
          type: string
        followerCount:
          type: integer
        enabled:
          type: boolean
    AuthenticationConfig:
      type: object
      properties:
        indieAuthEnabled:
          type: boolean
    YPDetails:
      type: object
      properties:
        lastConnectTime:
          type: string
        name:
          type: string
        description:
          type: string
        streamTitle:
          type: string
        logo:
          type: string
        tags:
          type: array
          items:
            type: string
        social:
          type: array
          items:
            $ref: '#/components/schemas/SocialHandle'
        viewerCount:
          type: integer
        overallMaxViewerCount:
          type: integer
        sessionMaxViewerCount:
          type: integer
        nsfw:
          type: boolean
        online:
          type: boolean
    VideoVariant:
      type: object
      properties:
        index:
          type: integer
        name:
          type: string
    PlaybackMetrics:
      type: object
      properties:
        bandwidth:
          type: number
          format: double
        latency:
          type: number
          format: double
        errors:
          type: number
          format: double
        downloadDuration:
          type: number
          format: double
        qualityVariantChanges:
          type: number
          format: double
    AdminStatus:
      type: object
      properties:
        broadcaster:
          $ref: '#/components/schemas/Broadcaster'
        currentBroadcast:
          $ref: '#/components/schemas/CurrentBroadcast'
        health:
          $ref: '#/components/schemas/StreamHealthOverview'
        streamTitle:
          type: string
        versionNumber:
          type: string
        viewerCount:
          type: integer
        overallPeakViewerCount:
          type: integer
        sessionPeakViewerCount:
          type: integer
        online:
          type: boolean
    Broadcaster:
      type: object
      properties:
        time:
          type: string
          format: date-time
        remoteAddr:
          type: string
        streamDetails:
          $ref: '#/components/schemas/InboundStreamDetails'
    InboundStreamDetails:
      type: object
      properties:
        videoCodec:
          type: string
        audioCodec:
          type: string
        encoder:
          type: string
        width:
          type: integer
        height:
          type: integer
        videoBitrate:
          type: integer
        audioBitrate:
          type: integer
        framerate:
          type: number
          format: float
    CurrentBroadcast:
      type: object
      properties:
        outputSettings:
          type: array
          items:
            $ref: '#/components/schemas/StreamOutputVariant'
        latencyLevel:
          $ref: '#/components/schemas/LatencyLevel'
    StreamOutputVariant:
      type: object
      properties:
        name:
          type: string
        videoPassthrough:
          type: boolean
        audioPassthrough:
          type: boolean
        videoBitrate:
          type: integer
        audioBitrate:
          type: integer
        scaledWidth:
          type: integer
        scaledHeight:
          type: integer
        framerate:
          type: integer
        cpuUsageLevel:
          type: integer
    LatencyLevel:
      type: object
      properties:
        level:
          type: integer
    StreamHealthOverview:
      type: object
      properties:
        message:
          type: string
        healthPercentage:
          type: integer
        representation:
          type: integer
        healthy:
          type: boolean
    Error:
      type: object
      description: Structure for an error response
      properties:
        error:
          type: string
    BaseAPIResponse:
      type: object
      description: Simple API response
      properties:
        message:
          type: string
        success:
          type: boolean
  headers:
    'Access-Control-Allow-Origin':
      schema:
        type: string
    'Access-Control-Allow-Credentials':
      schema:
        type: string
        format: boolean
    'Access-Control-Allow-Headers':
      schema:
        type: string
    'WWW-Authenticate':
      schema:
        type: string
    'X-Content-Type-Options':
      schema:
        type: string
  responses:
    '204':
      description: No Content
      headers:
        'Access-Control-Allow-Origin':
          $ref: "#/components/headers/Access-Control-Allow-Origin"
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseAPIResponse"
    '401':
      description: Unauthorized
      content:
        text/plain:
          schema:
            type: string
    '401BasicAuth':
      description: Basic auth failure
      headers:
        'WWW-Authenticate':
          $ref: "#/components/headers/WWW-Authenticate"
        'X-Content-Type-Options':
          $ref: "#/components/headers/X-Content-Type-Options"
      content:
        text/plain:
          schema:
            type: string
    '404':
      description: Not found
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    '501':
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer

