// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// ActionMessage defines model for ActionMessage.
type ActionMessage struct {
	Body      *string `json:"body,omitempty"`
	Id        *string `json:"id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// ChatMessages defines model for ChatMessages.
type ChatMessages = []ChatMessages_Item

// ChatMessages_Item defines model for ChatMessages.Item.
type ChatMessages_Item struct {
	union json.RawMessage
}

// Emoji Name and url for an emoji
type Emoji struct {
	// Name The name of the emoji
	Name *string `json:"name,omitempty"`

	// Url URL for the emoji image
	Url *string `json:"url,omitempty"`
}

// Error Structure for an error response
type Error struct {
	Error *string `json:"error,omitempty"`
}

// Event defines model for Event.
type Event struct {
	Id        *string `json:"id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// FederatedAction defines model for FederatedAction.
type FederatedAction struct {
	Body      *string `json:"body,omitempty"`
	Id        *string `json:"id,omitempty"`
	Image     *string `json:"image,omitempty"`
	Link      *string `json:"link,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Title     *string `json:"title,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// MessageEvent defines model for MessageEvent.
type MessageEvent struct {
	Body *string `json:"body,omitempty"`
}

// Status Response for status
type Status struct {
	LastConnectTime    *string `json:"lastConnectTime,omitempty"`
	LastDisconnectTime *string `json:"lastDisconnectTime,omitempty"`
	Online             *bool   `json:"online,omitempty"`
	ServerTime         *string `json:"serverTime,omitempty"`
	VersionNumber      *string `json:"versionNumber,omitempty"`
	ViewerCount        *int    `json:"viewerCount,omitempty"`
}

// SystemMessage defines model for SystemMessage.
type SystemMessage struct {
	Body      *string `json:"body,omitempty"`
	Id        *string `json:"id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// User defines model for User.
type User struct {
	Authenticated *bool     `json:"authenticated,omitempty"`
	CreatedAt     *string   `json:"createdAt,omitempty"`
	DisabledAt    *string   `json:"disabledAt,omitempty"`
	DisplayColor  *int      `json:"displayColor,omitempty"`
	DisplayName   *string   `json:"displayName,omitempty"`
	Id            *string   `json:"id,omitempty"`
	IsBot         *bool     `json:"isBot,omitempty"`
	NameChangedAt *string   `json:"nameChangedAt,omitempty"`
	PreviousNames *[]string `json:"previousNames,omitempty"`
	Scopes        *[]string `json:"scopes,omitempty"`
}

// UserEvent defines model for UserEvent.
type UserEvent struct {
	ClientId *int    `json:"clientId,omitempty"`
	HiddenAt *string `json:"hiddenAt,omitempty"`
	User     *User   `json:"user,omitempty"`
}

// UserMessage defines model for UserMessage.
type UserMessage struct {
	Body      *string `json:"body,omitempty"`
	ClientId  *int    `json:"clientId,omitempty"`
	HiddenAt  *string `json:"hiddenAt,omitempty"`
	Id        *string `json:"id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Type      *string `json:"type,omitempty"`
	User      *User   `json:"user,omitempty"`
}

// N500 Structure for an error response
type N500 = Error

// N501 Structure for an error response
type N501 = Error

// AsUserMessage returns the union data inside the ChatMessages_Item as a UserMessage
func (t ChatMessages_Item) AsUserMessage() (UserMessage, error) {
	var body UserMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserMessage overwrites any union data inside the ChatMessages_Item as the provided UserMessage
func (t *ChatMessages_Item) FromUserMessage(v UserMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserMessage performs a merge with any union data inside the ChatMessages_Item, using the provided UserMessage
func (t *ChatMessages_Item) MergeUserMessage(v UserMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSystemMessage returns the union data inside the ChatMessages_Item as a SystemMessage
func (t ChatMessages_Item) AsSystemMessage() (SystemMessage, error) {
	var body SystemMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSystemMessage overwrites any union data inside the ChatMessages_Item as the provided SystemMessage
func (t *ChatMessages_Item) FromSystemMessage(v SystemMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSystemMessage performs a merge with any union data inside the ChatMessages_Item, using the provided SystemMessage
func (t *ChatMessages_Item) MergeSystemMessage(v SystemMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionMessage returns the union data inside the ChatMessages_Item as a ActionMessage
func (t ChatMessages_Item) AsActionMessage() (ActionMessage, error) {
	var body ActionMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionMessage overwrites any union data inside the ChatMessages_Item as the provided ActionMessage
func (t *ChatMessages_Item) FromActionMessage(v ActionMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionMessage performs a merge with any union data inside the ChatMessages_Item, using the provided ActionMessage
func (t *ChatMessages_Item) MergeActionMessage(v ActionMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFederatedAction returns the union data inside the ChatMessages_Item as a FederatedAction
func (t ChatMessages_Item) AsFederatedAction() (FederatedAction, error) {
	var body FederatedAction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFederatedAction overwrites any union data inside the ChatMessages_Item as the provided FederatedAction
func (t *ChatMessages_Item) FromFederatedAction(v FederatedAction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFederatedAction performs a merge with any union data inside the ChatMessages_Item, using the provided FederatedAction
func (t *ChatMessages_Item) MergeFederatedAction(v FederatedAction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChatMessages_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChatMessages_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
