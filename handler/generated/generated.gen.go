// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all access tokens
	// (GET /admin/accesstokens)
	GetExternalAPIUsers(w http.ResponseWriter, r *http.Request)
	// Create a single access token
	// (POST /admin/accesstokens/create)
	CreateExternalAPIUser(w http.ResponseWriter, r *http.Request)
	// Delete a single external API user
	// (POST /admin/accesstokens/delete)
	DeleteExternalAPIUser(w http.ResponseWriter, r *http.Request)
	// Get a detailed list of currently connected chat clients
	// (GET /admin/chat/clients)
	GetConnectedChatClients(w http.ResponseWriter, r *http.Request)
	// Get all chat messages for the admin, unfiltered
	// (GET /admin/chat/messages)
	GetAdminChatMessages(w http.ResponseWriter, r *http.Request)
	// Update visibility of chat messages
	// (POST /admin/chat/messagevisibility)
	UpdateMessageVisibility(w http.ResponseWriter, r *http.Request)
	// Get a list of disabled users
	// (GET /admin/chat/users/disabled)
	GetDisabledUsers(w http.ResponseWriter, r *http.Request)
	// Get all banned IP addresses
	// (GET /admin/chat/users/ipbans)
	GetIPAddressBans(w http.ResponseWriter, r *http.Request)
	// Ban an IP address
	// (POST /admin/chat/users/ipbans/create)
	BanIPAddress(w http.ResponseWriter, r *http.Request)
	// Remove an IP ban
	// (POST /admin/chat/users/ipbans/remove)
	UnbanIPAddress(w http.ResponseWriter, r *http.Request)
	// Get a list of moderator users
	// (GET /admin/chat/users/moderators)
	GetModerators(w http.ResponseWriter, r *http.Request)
	// Enable or disable a user
	// (POST /admin/chat/users/setenabled)
	UpdateUserEnabled(w http.ResponseWriter, r *http.Request)
	// Set moderator status for a user
	// (POST /admin/chat/users/setmoderator)
	UpdateUserModerator(w http.ResponseWriter, r *http.Request)
	// Change the current admin password
	// (POST /admin/config/adminpass)
	SetAdminPassword(w http.ResponseWriter, r *http.Request)
	// Set style/color/css values
	// (POST /admin/config/appearance)
	SetCustomColorVariableValues(w http.ResponseWriter, r *http.Request)
	// Disable chat
	// (POST /admin/config/chat/disable)
	SetChatDisabled(w http.ResponseWriter, r *http.Request)
	// Enable/disable chat established user mode
	// (POST /admin/config/chat/establishedusermode)
	SetEnableEstablishedChatUserMode(w http.ResponseWriter, r *http.Request)
	// Set chat usernames that are not allowed
	// (POST /admin/config/chat/forbiddenusernames)
	SetForbiddenUsernameList(w http.ResponseWriter, r *http.Request)
	// Enable chat for user join messages
	// (POST /admin/config/chat/joinmessagesenabled)
	SetChatJoinMessagesEnabled(w http.ResponseWriter, r *http.Request)
	// Set the suggested chat usernames that will be assigned automatically
	// (POST /admin/config/chat/suggestedusernames)
	SetSuggestedUsernameList(w http.ResponseWriter, r *http.Request)
	// Update logo
	// (POST /admin/config/logo)
	SetLogo(w http.ResponseWriter, r *http.Request)
	// Change the server name
	// (POST /admin/config/name)
	SetServerName(w http.ResponseWriter, r *http.Request)
	// Change the offline message
	// (POST /admin/config/offlinemessage)
	SetCustomOfflineMessage(w http.ResponseWriter, r *http.Request)
	// Change the extra page content in memory
	// (POST /admin/config/pagecontent)
	SetExtraPageContent(w http.ResponseWriter, r *http.Request)
	// Change the server summary
	// (POST /admin/config/serversummary)
	SetServerSummary(w http.ResponseWriter, r *http.Request)
	// Set an array of valid stream keys
	// (POST /admin/config/streamkeys)
	SetStreamKeys(w http.ResponseWriter, r *http.Request)
	// Change the stream title
	// (POST /admin/config/streamtitle)
	SetStreamTitle(w http.ResponseWriter, r *http.Request)
	// Update server tags
	// (POST /admin/config/tags)
	SetTags(w http.ResponseWriter, r *http.Request)
	// Set video codec
	// (POST /admin/config/video/codec)
	SetVideoCodec(w http.ResponseWriter, r *http.Request)
	// Change the welcome message
	// (POST /admin/config/welcomemessage)
	SetServerWelcomeMessage(w http.ResponseWriter, r *http.Request)
	// Disconnect inbound stream
	// (GET /admin/disconnect)
	DisconnectInboundConnection(w http.ResponseWriter, r *http.Request)
	// Delete custom emoji
	// (POST /admin/emoji/delete)
	DeleteCustomEmoji(w http.ResponseWriter, r *http.Request)
	// Upload custom emoji
	// (POST /admin/emoji/upload)
	UploadCustomEmoji(w http.ResponseWriter, r *http.Request)
	// Get followers
	// (GET /admin/followers)
	GetFollowersAdmin(w http.ResponseWriter, r *http.Request, params GetFollowersAdminParams)
	// Set the following state of a follower or follow request
	// (POST /admin/followers/approve)
	ApproveFollower(w http.ResponseWriter, r *http.Request)
	// Get a list of rejected or blocked follows
	// (GET /admin/followers/blocked)
	GetBlockedAndRejectedFollowers(w http.ResponseWriter, r *http.Request)
	// Get a list of pending follow requests
	// (GET /admin/followers/pending)
	GetPendingFollowers(w http.ResponseWriter, r *http.Request)
	// Get the current hardware stats
	// (GET /admin/hardwarestats)
	GetHardwareStats(w http.ResponseWriter, r *http.Request)
	// Get all logs
	// (GET /admin/logs)
	GetLogs(w http.ResponseWriter, r *http.Request)
	// Get warning/error logs
	// (GET /admin/logs/warnings)
	GetWarnings(w http.ResponseWriter, r *http.Request)
	// Get the current server config
	// (GET /admin/serverconfig)
	GetServerConfig(w http.ResponseWriter, r *http.Request)
	// Get current inboard broadcaster
	// (GET /admin/status)
	GetAdminStatus(w http.ResponseWriter, r *http.Request)
	// Force quit the server and restart it
	// (GET /admin/update/forcequit)
	AutoUpdateForceQuit(w http.ResponseWriter, r *http.Request)
	// Return the auto-update features that are supported for this instance
	// (GET /admin/update/options)
	AutoUpdateOptions(w http.ResponseWriter, r *http.Request)
	// Begin the auto-update
	// (GET /admin/update/start)
	AutoUpdateStart(w http.ResponseWriter, r *http.Request)
	// Get active viewers
	// (GET /admin/viewers)
	GetActiveViewers(w http.ResponseWriter, r *http.Request)
	// Get viewer count over time
	// (GET /admin/viewersOverTime)
	GetViewersOverTime(w http.ResponseWriter, r *http.Request, params GetViewersOverTimeParams)
	// Get all the webhooks
	// (GET /admin/webhooks)
	GetWebhooks(w http.ResponseWriter, r *http.Request)
	// Create a single webhook
	// (POST /admin/webhooks/create)
	CreateWebhook(w http.ResponseWriter, r *http.Request)
	// Delete a single webhook
	// (POST /admin/webhooks/delete)
	DeleteWebhook(w http.ResponseWriter, r *http.Request)
	// Gets a list of chat messages
	// (GET /chat)
	GetChatMessages(w http.ResponseWriter, r *http.Request, params GetChatMessagesParams)
	// Registers an anonymous chat user
	// (POST /chat/register)
	RegisterAnonymousChatUser(w http.ResponseWriter, r *http.Request, params RegisterAnonymousChatUserParams)
	// Get the web config
	// (GET /config)
	GetConfig(w http.ResponseWriter, r *http.Request)
	// Get list of custom emojis supported in the chat
	// (GET /emoji)
	GetEmoji(w http.ResponseWriter, r *http.Request)
	// Gets the list of followers
	// (GET /followers)
	GetFollowers(w http.ResponseWriter, r *http.Request, params GetFollowersParams)
	// Get chat history
	// (GET /integrations/chat)
	ExternalGetChatMessages(w http.ResponseWriter, r *http.Request)
	// Send a user action to chat
	// (POST /integrations/chat/action)
	SendChatAction(w http.ResponseWriter, r *http.Request)
	// Hide chat message
	// (POST /integrations/chat/messagevisibility)
	ExternalUpdateMessageVisibility(w http.ResponseWriter, r *http.Request)
	// Send a message to chat as a specific 3rd party bot/integration based on its access token
	// (POST /integrations/chat/send)
	SendIntegrationChatMessage(w http.ResponseWriter, r *http.Request)
	// Send a system message to the chat
	// (POST /integrations/chat/system)
	SendSystemMessage(w http.ResponseWriter, r *http.Request)
	// Send a system message to a single client
	// (POST /integrations/chat/system/client/{clientId})
	SendSystemMessageToConnectedClient(w http.ResponseWriter, r *http.Request, clientId int)
	// Send a user message to chat
	// (POST /integrations/chat/user)
	SendUserMessage(w http.ResponseWriter, r *http.Request)
	// Connected clients
	// (GET /integrations/clients)
	ExternalGetConnectedChatClients(w http.ResponseWriter, r *http.Request)
	// Stream title
	// (POST /integrations/streamtitle)
	ExternalSetStreamTitle(w http.ResponseWriter, r *http.Request)
	// Save video playback metrics for future video health recording
	// (POST /metrics/playback)
	PostMetricsPlayback(w http.ResponseWriter, r *http.Request)
	// Register for notifications
	// (POST /notifications/register)
	PostNotificationsRegister(w http.ResponseWriter, r *http.Request, params PostNotificationsRegisterParams)
	// Tell the backend you're an active viewer
	// (GET /ping)
	Ping(w http.ResponseWriter, r *http.Request)
	// Request remote follow
	// (POST /remotefollow)
	RemoteFollow(w http.ResponseWriter, r *http.Request)
	// Get all social platforms
	// (GET /socialplatforms)
	GetSocialPlatforms(w http.ResponseWriter, r *http.Request)
	// Get the status of the server
	// (GET /status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get a list of video variants available
	// (GET /video/variants)
	GetVideoVariants(w http.ResponseWriter, r *http.Request)
	// Get the YP protocol data
	// (GET /yp)
	GetYP(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all access tokens
// (GET /admin/accesstokens)
func (_ Unimplemented) GetExternalAPIUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a single access token
// (POST /admin/accesstokens/create)
func (_ Unimplemented) CreateExternalAPIUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a single external API user
// (POST /admin/accesstokens/delete)
func (_ Unimplemented) DeleteExternalAPIUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a detailed list of currently connected chat clients
// (GET /admin/chat/clients)
func (_ Unimplemented) GetConnectedChatClients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all chat messages for the admin, unfiltered
// (GET /admin/chat/messages)
func (_ Unimplemented) GetAdminChatMessages(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update visibility of chat messages
// (POST /admin/chat/messagevisibility)
func (_ Unimplemented) UpdateMessageVisibility(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of disabled users
// (GET /admin/chat/users/disabled)
func (_ Unimplemented) GetDisabledUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all banned IP addresses
// (GET /admin/chat/users/ipbans)
func (_ Unimplemented) GetIPAddressBans(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ban an IP address
// (POST /admin/chat/users/ipbans/create)
func (_ Unimplemented) BanIPAddress(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove an IP ban
// (POST /admin/chat/users/ipbans/remove)
func (_ Unimplemented) UnbanIPAddress(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of moderator users
// (GET /admin/chat/users/moderators)
func (_ Unimplemented) GetModerators(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable or disable a user
// (POST /admin/chat/users/setenabled)
func (_ Unimplemented) UpdateUserEnabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set moderator status for a user
// (POST /admin/chat/users/setmoderator)
func (_ Unimplemented) UpdateUserModerator(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the current admin password
// (POST /admin/config/adminpass)
func (_ Unimplemented) SetAdminPassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set style/color/css values
// (POST /admin/config/appearance)
func (_ Unimplemented) SetCustomColorVariableValues(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disable chat
// (POST /admin/config/chat/disable)
func (_ Unimplemented) SetChatDisabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable/disable chat established user mode
// (POST /admin/config/chat/establishedusermode)
func (_ Unimplemented) SetEnableEstablishedChatUserMode(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set chat usernames that are not allowed
// (POST /admin/config/chat/forbiddenusernames)
func (_ Unimplemented) SetForbiddenUsernameList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable chat for user join messages
// (POST /admin/config/chat/joinmessagesenabled)
func (_ Unimplemented) SetChatJoinMessagesEnabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the suggested chat usernames that will be assigned automatically
// (POST /admin/config/chat/suggestedusernames)
func (_ Unimplemented) SetSuggestedUsernameList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update logo
// (POST /admin/config/logo)
func (_ Unimplemented) SetLogo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the server name
// (POST /admin/config/name)
func (_ Unimplemented) SetServerName(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the offline message
// (POST /admin/config/offlinemessage)
func (_ Unimplemented) SetCustomOfflineMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the extra page content in memory
// (POST /admin/config/pagecontent)
func (_ Unimplemented) SetExtraPageContent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the server summary
// (POST /admin/config/serversummary)
func (_ Unimplemented) SetServerSummary(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set an array of valid stream keys
// (POST /admin/config/streamkeys)
func (_ Unimplemented) SetStreamKeys(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the stream title
// (POST /admin/config/streamtitle)
func (_ Unimplemented) SetStreamTitle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update server tags
// (POST /admin/config/tags)
func (_ Unimplemented) SetTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set video codec
// (POST /admin/config/video/codec)
func (_ Unimplemented) SetVideoCodec(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the welcome message
// (POST /admin/config/welcomemessage)
func (_ Unimplemented) SetServerWelcomeMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disconnect inbound stream
// (GET /admin/disconnect)
func (_ Unimplemented) DisconnectInboundConnection(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete custom emoji
// (POST /admin/emoji/delete)
func (_ Unimplemented) DeleteCustomEmoji(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload custom emoji
// (POST /admin/emoji/upload)
func (_ Unimplemented) UploadCustomEmoji(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get followers
// (GET /admin/followers)
func (_ Unimplemented) GetFollowersAdmin(w http.ResponseWriter, r *http.Request, params GetFollowersAdminParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the following state of a follower or follow request
// (POST /admin/followers/approve)
func (_ Unimplemented) ApproveFollower(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of rejected or blocked follows
// (GET /admin/followers/blocked)
func (_ Unimplemented) GetBlockedAndRejectedFollowers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of pending follow requests
// (GET /admin/followers/pending)
func (_ Unimplemented) GetPendingFollowers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the current hardware stats
// (GET /admin/hardwarestats)
func (_ Unimplemented) GetHardwareStats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all logs
// (GET /admin/logs)
func (_ Unimplemented) GetLogs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get warning/error logs
// (GET /admin/logs/warnings)
func (_ Unimplemented) GetWarnings(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the current server config
// (GET /admin/serverconfig)
func (_ Unimplemented) GetServerConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current inboard broadcaster
// (GET /admin/status)
func (_ Unimplemented) GetAdminStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Force quit the server and restart it
// (GET /admin/update/forcequit)
func (_ Unimplemented) AutoUpdateForceQuit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Return the auto-update features that are supported for this instance
// (GET /admin/update/options)
func (_ Unimplemented) AutoUpdateOptions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Begin the auto-update
// (GET /admin/update/start)
func (_ Unimplemented) AutoUpdateStart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get active viewers
// (GET /admin/viewers)
func (_ Unimplemented) GetActiveViewers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get viewer count over time
// (GET /admin/viewersOverTime)
func (_ Unimplemented) GetViewersOverTime(w http.ResponseWriter, r *http.Request, params GetViewersOverTimeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all the webhooks
// (GET /admin/webhooks)
func (_ Unimplemented) GetWebhooks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a single webhook
// (POST /admin/webhooks/create)
func (_ Unimplemented) CreateWebhook(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a single webhook
// (POST /admin/webhooks/delete)
func (_ Unimplemented) DeleteWebhook(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a list of chat messages
// (GET /chat)
func (_ Unimplemented) GetChatMessages(w http.ResponseWriter, r *http.Request, params GetChatMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers an anonymous chat user
// (POST /chat/register)
func (_ Unimplemented) RegisterAnonymousChatUser(w http.ResponseWriter, r *http.Request, params RegisterAnonymousChatUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the web config
// (GET /config)
func (_ Unimplemented) GetConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of custom emojis supported in the chat
// (GET /emoji)
func (_ Unimplemented) GetEmoji(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets the list of followers
// (GET /followers)
func (_ Unimplemented) GetFollowers(w http.ResponseWriter, r *http.Request, params GetFollowersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get chat history
// (GET /integrations/chat)
func (_ Unimplemented) ExternalGetChatMessages(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send a user action to chat
// (POST /integrations/chat/action)
func (_ Unimplemented) SendChatAction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Hide chat message
// (POST /integrations/chat/messagevisibility)
func (_ Unimplemented) ExternalUpdateMessageVisibility(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send a message to chat as a specific 3rd party bot/integration based on its access token
// (POST /integrations/chat/send)
func (_ Unimplemented) SendIntegrationChatMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send a system message to the chat
// (POST /integrations/chat/system)
func (_ Unimplemented) SendSystemMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send a system message to a single client
// (POST /integrations/chat/system/client/{clientId})
func (_ Unimplemented) SendSystemMessageToConnectedClient(w http.ResponseWriter, r *http.Request, clientId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send a user message to chat
// (POST /integrations/chat/user)
func (_ Unimplemented) SendUserMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Connected clients
// (GET /integrations/clients)
func (_ Unimplemented) ExternalGetConnectedChatClients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stream title
// (POST /integrations/streamtitle)
func (_ Unimplemented) ExternalSetStreamTitle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Save video playback metrics for future video health recording
// (POST /metrics/playback)
func (_ Unimplemented) PostMetricsPlayback(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register for notifications
// (POST /notifications/register)
func (_ Unimplemented) PostNotificationsRegister(w http.ResponseWriter, r *http.Request, params PostNotificationsRegisterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Tell the backend you're an active viewer
// (GET /ping)
func (_ Unimplemented) Ping(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Request remote follow
// (POST /remotefollow)
func (_ Unimplemented) RemoteFollow(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all social platforms
// (GET /socialplatforms)
func (_ Unimplemented) GetSocialPlatforms(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the status of the server
// (GET /status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of video variants available
// (GET /video/variants)
func (_ Unimplemented) GetVideoVariants(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the YP protocol data
// (GET /yp)
func (_ Unimplemented) GetYP(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetExternalAPIUsers operation middleware
func (siw *ServerInterfaceWrapper) GetExternalAPIUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExternalAPIUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateExternalAPIUser operation middleware
func (siw *ServerInterfaceWrapper) CreateExternalAPIUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateExternalAPIUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteExternalAPIUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteExternalAPIUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteExternalAPIUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConnectedChatClients operation middleware
func (siw *ServerInterfaceWrapper) GetConnectedChatClients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnectedChatClients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAdminChatMessages operation middleware
func (siw *ServerInterfaceWrapper) GetAdminChatMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminChatMessages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMessageVisibility operation middleware
func (siw *ServerInterfaceWrapper) UpdateMessageVisibility(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMessageVisibility(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDisabledUsers operation middleware
func (siw *ServerInterfaceWrapper) GetDisabledUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDisabledUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIPAddressBans operation middleware
func (siw *ServerInterfaceWrapper) GetIPAddressBans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIPAddressBans(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BanIPAddress operation middleware
func (siw *ServerInterfaceWrapper) BanIPAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BanIPAddress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnbanIPAddress operation middleware
func (siw *ServerInterfaceWrapper) UnbanIPAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnbanIPAddress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetModerators operation middleware
func (siw *ServerInterfaceWrapper) GetModerators(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModerators(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserEnabled operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserEnabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserEnabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserModerator operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserModerator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserModerator(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetAdminPassword operation middleware
func (siw *ServerInterfaceWrapper) SetAdminPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetAdminPassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetCustomColorVariableValues operation middleware
func (siw *ServerInterfaceWrapper) SetCustomColorVariableValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetCustomColorVariableValues(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetChatDisabled operation middleware
func (siw *ServerInterfaceWrapper) SetChatDisabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetChatDisabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetEnableEstablishedChatUserMode operation middleware
func (siw *ServerInterfaceWrapper) SetEnableEstablishedChatUserMode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetEnableEstablishedChatUserMode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetForbiddenUsernameList operation middleware
func (siw *ServerInterfaceWrapper) SetForbiddenUsernameList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetForbiddenUsernameList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetChatJoinMessagesEnabled operation middleware
func (siw *ServerInterfaceWrapper) SetChatJoinMessagesEnabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetChatJoinMessagesEnabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetSuggestedUsernameList operation middleware
func (siw *ServerInterfaceWrapper) SetSuggestedUsernameList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetSuggestedUsernameList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetLogo operation middleware
func (siw *ServerInterfaceWrapper) SetLogo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetLogo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetServerName operation middleware
func (siw *ServerInterfaceWrapper) SetServerName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetServerName(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetCustomOfflineMessage operation middleware
func (siw *ServerInterfaceWrapper) SetCustomOfflineMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetCustomOfflineMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetExtraPageContent operation middleware
func (siw *ServerInterfaceWrapper) SetExtraPageContent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetExtraPageContent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetServerSummary operation middleware
func (siw *ServerInterfaceWrapper) SetServerSummary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetServerSummary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetStreamKeys operation middleware
func (siw *ServerInterfaceWrapper) SetStreamKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetStreamKeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetStreamTitle operation middleware
func (siw *ServerInterfaceWrapper) SetStreamTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetStreamTitle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetTags operation middleware
func (siw *ServerInterfaceWrapper) SetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetVideoCodec operation middleware
func (siw *ServerInterfaceWrapper) SetVideoCodec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetVideoCodec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetServerWelcomeMessage operation middleware
func (siw *ServerInterfaceWrapper) SetServerWelcomeMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetServerWelcomeMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DisconnectInboundConnection operation middleware
func (siw *ServerInterfaceWrapper) DisconnectInboundConnection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DisconnectInboundConnection(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCustomEmoji operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomEmoji(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomEmoji(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadCustomEmoji operation middleware
func (siw *ServerInterfaceWrapper) UploadCustomEmoji(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCustomEmoji(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFollowersAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetFollowersAdmin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowersAdminParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFollowersAdmin(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ApproveFollower operation middleware
func (siw *ServerInterfaceWrapper) ApproveFollower(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApproveFollower(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBlockedAndRejectedFollowers operation middleware
func (siw *ServerInterfaceWrapper) GetBlockedAndRejectedFollowers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBlockedAndRejectedFollowers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPendingFollowers operation middleware
func (siw *ServerInterfaceWrapper) GetPendingFollowers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPendingFollowers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHardwareStats operation middleware
func (siw *ServerInterfaceWrapper) GetHardwareStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHardwareStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLogs operation middleware
func (siw *ServerInterfaceWrapper) GetLogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWarnings operation middleware
func (siw *ServerInterfaceWrapper) GetWarnings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWarnings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetServerConfig operation middleware
func (siw *ServerInterfaceWrapper) GetServerConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServerConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAdminStatus operation middleware
func (siw *ServerInterfaceWrapper) GetAdminStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutoUpdateForceQuit operation middleware
func (siw *ServerInterfaceWrapper) AutoUpdateForceQuit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutoUpdateForceQuit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutoUpdateOptions operation middleware
func (siw *ServerInterfaceWrapper) AutoUpdateOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutoUpdateOptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutoUpdateStart operation middleware
func (siw *ServerInterfaceWrapper) AutoUpdateStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutoUpdateStart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetActiveViewers operation middleware
func (siw *ServerInterfaceWrapper) GetActiveViewers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetActiveViewers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetViewersOverTime operation middleware
func (siw *ServerInterfaceWrapper) GetViewersOverTime(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetViewersOverTimeParams

	// ------------- Optional query parameter "windowStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowStart", r.URL.Query(), &params.WindowStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowStart", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetViewersOverTime(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebhooks operation middleware
func (siw *ServerInterfaceWrapper) GetWebhooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebhooks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWebhook operation middleware
func (siw *ServerInterfaceWrapper) CreateWebhook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWebhook(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteWebhook operation middleware
func (siw *ServerInterfaceWrapper) DeleteWebhook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWebhook(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetChatMessages operation middleware
func (siw *ServerInterfaceWrapper) GetChatMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChatMessagesParams

	// ------------- Required query parameter "accessToken" -------------

	if paramValue := r.URL.Query().Get("accessToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "accessToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "accessToken", r.URL.Query(), &params.AccessToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accessToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChatMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterAnonymousChatUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterAnonymousChatUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterAnonymousChatUserParams

	headers := r.Header

	// ------------- Optional header parameter "X-Forwarded-User" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Forwarded-User")]; found {
		var XForwardedUser string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Forwarded-User", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Forwarded-User", valueList[0], &XForwardedUser, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Forwarded-User", Err: err})
			return
		}

		params.XForwardedUser = &XForwardedUser

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterAnonymousChatUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmoji operation middleware
func (siw *ServerInterfaceWrapper) GetEmoji(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmoji(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFollowers operation middleware
func (siw *ServerInterfaceWrapper) GetFollowers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFollowers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExternalGetChatMessages operation middleware
func (siw *ServerInterfaceWrapper) ExternalGetChatMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalGetChatMessages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendChatAction operation middleware
func (siw *ServerInterfaceWrapper) SendChatAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendChatAction(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExternalUpdateMessageVisibility operation middleware
func (siw *ServerInterfaceWrapper) ExternalUpdateMessageVisibility(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalUpdateMessageVisibility(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendIntegrationChatMessage operation middleware
func (siw *ServerInterfaceWrapper) SendIntegrationChatMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendIntegrationChatMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendSystemMessage operation middleware
func (siw *ServerInterfaceWrapper) SendSystemMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendSystemMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendSystemMessageToConnectedClient operation middleware
func (siw *ServerInterfaceWrapper) SendSystemMessageToConnectedClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "clientId" -------------
	var clientId int

	err = runtime.BindStyledParameterWithOptions("simple", "clientId", chi.URLParam(r, "clientId"), &clientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clientId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendSystemMessageToConnectedClient(w, r, clientId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SendUserMessage operation middleware
func (siw *ServerInterfaceWrapper) SendUserMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendUserMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExternalGetConnectedChatClients operation middleware
func (siw *ServerInterfaceWrapper) ExternalGetConnectedChatClients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalGetConnectedChatClients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExternalSetStreamTitle operation middleware
func (siw *ServerInterfaceWrapper) ExternalSetStreamTitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalSetStreamTitle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostMetricsPlayback operation middleware
func (siw *ServerInterfaceWrapper) PostMetricsPlayback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMetricsPlayback(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNotificationsRegister operation middleware
func (siw *ServerInterfaceWrapper) PostNotificationsRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNotificationsRegisterParams

	// ------------- Required query parameter "accessToken" -------------

	if paramValue := r.URL.Query().Get("accessToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "accessToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "accessToken", r.URL.Query(), &params.AccessToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accessToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNotificationsRegister(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoteFollow operation middleware
func (siw *ServerInterfaceWrapper) RemoteFollow(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoteFollow(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSocialPlatforms operation middleware
func (siw *ServerInterfaceWrapper) GetSocialPlatforms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSocialPlatforms(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVideoVariants operation middleware
func (siw *ServerInterfaceWrapper) GetVideoVariants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVideoVariants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetYP operation middleware
func (siw *ServerInterfaceWrapper) GetYP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetYP(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/accesstokens", wrapper.GetExternalAPIUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/accesstokens/create", wrapper.CreateExternalAPIUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/accesstokens/delete", wrapper.DeleteExternalAPIUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/chat/clients", wrapper.GetConnectedChatClients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/chat/messages", wrapper.GetAdminChatMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/chat/messagevisibility", wrapper.UpdateMessageVisibility)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/chat/users/disabled", wrapper.GetDisabledUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/chat/users/ipbans", wrapper.GetIPAddressBans)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/chat/users/ipbans/create", wrapper.BanIPAddress)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/chat/users/ipbans/remove", wrapper.UnbanIPAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/chat/users/moderators", wrapper.GetModerators)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/chat/users/setenabled", wrapper.UpdateUserEnabled)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/chat/users/setmoderator", wrapper.UpdateUserModerator)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/adminpass", wrapper.SetAdminPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/appearance", wrapper.SetCustomColorVariableValues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/chat/disable", wrapper.SetChatDisabled)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/chat/establishedusermode", wrapper.SetEnableEstablishedChatUserMode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/chat/forbiddenusernames", wrapper.SetForbiddenUsernameList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/chat/joinmessagesenabled", wrapper.SetChatJoinMessagesEnabled)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/chat/suggestedusernames", wrapper.SetSuggestedUsernameList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/logo", wrapper.SetLogo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/name", wrapper.SetServerName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/offlinemessage", wrapper.SetCustomOfflineMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/pagecontent", wrapper.SetExtraPageContent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/serversummary", wrapper.SetServerSummary)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/streamkeys", wrapper.SetStreamKeys)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/streamtitle", wrapper.SetStreamTitle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/tags", wrapper.SetTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/video/codec", wrapper.SetVideoCodec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/config/welcomemessage", wrapper.SetServerWelcomeMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/disconnect", wrapper.DisconnectInboundConnection)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/emoji/delete", wrapper.DeleteCustomEmoji)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/emoji/upload", wrapper.UploadCustomEmoji)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/followers", wrapper.GetFollowersAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/followers/approve", wrapper.ApproveFollower)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/followers/blocked", wrapper.GetBlockedAndRejectedFollowers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/followers/pending", wrapper.GetPendingFollowers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/hardwarestats", wrapper.GetHardwareStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/logs", wrapper.GetLogs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/logs/warnings", wrapper.GetWarnings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/serverconfig", wrapper.GetServerConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/status", wrapper.GetAdminStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/update/forcequit", wrapper.AutoUpdateForceQuit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/update/options", wrapper.AutoUpdateOptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/update/start", wrapper.AutoUpdateStart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/viewers", wrapper.GetActiveViewers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/viewersOverTime", wrapper.GetViewersOverTime)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/webhooks", wrapper.GetWebhooks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/webhooks/create", wrapper.CreateWebhook)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/webhooks/delete", wrapper.DeleteWebhook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/chat", wrapper.GetChatMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/chat/register", wrapper.RegisterAnonymousChatUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/config", wrapper.GetConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/emoji", wrapper.GetEmoji)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/followers", wrapper.GetFollowers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/chat", wrapper.ExternalGetChatMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/chat/action", wrapper.SendChatAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/chat/messagevisibility", wrapper.ExternalUpdateMessageVisibility)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/chat/send", wrapper.SendIntegrationChatMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/chat/system", wrapper.SendSystemMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/chat/system/client/{clientId}", wrapper.SendSystemMessageToConnectedClient)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/chat/user", wrapper.SendUserMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/integrations/clients", wrapper.ExternalGetConnectedChatClients)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/integrations/streamtitle", wrapper.ExternalSetStreamTitle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/metrics/playback", wrapper.PostMetricsPlayback)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notifications/register", wrapper.PostNotificationsRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.Ping)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/remotefollow", wrapper.RemoteFollow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/socialplatforms", wrapper.GetSocialPlatforms)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/video/variants", wrapper.GetVideoVariants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/yp", wrapper.GetYP)
	})

	return r
}
