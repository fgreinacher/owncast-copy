{"version":3,"file":"static/chunks/pages/admin/config/server-07b0569352ef05a6.js","mappings":"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","sources":["webpack://_N_E/?dfb8","webpack://_N_E/./components/admin/ToggleSwitch.tsx","webpack://_N_E/./components/admin/config/server/StreamKeys.tsx","webpack://_N_E/./components/admin/ResetYP.tsx","webpack://_N_E/./components/admin/EditInstanceDetails2.tsx","webpack://_N_E/./components/admin/config/server/ServerConfig.tsx","webpack://_N_E/./components/admin/config/server/EditStorage.tsx","webpack://_N_E/./components/admin/config/server/StorageConfig.tsx","webpack://_N_E/./pages/admin/config/server/index.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/config/server\",\n      function () {\n        return require(\"private-next-pages/admin/config/server/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/admin/config/server\"])\n      });\n    }\n  ","// This is a wrapper for the Ant Switch component.\n// This one is styled to match the form-textfield component.\n// If `useSubmit` is true then it will automatically post to the config API onChange.\n\nimport React, { useState, useContext, FC } from 'react';\nimport { Switch } from 'antd';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\nimport { RESET_TIMEOUT, postConfigUpdateToAPI } from '../../utils/config-constants';\nimport { ServerStatusContext } from '../../utils/server-status-context';\n\nexport type ToggleSwitchProps = {\n  fieldName: string;\n\n  apiPath?: string;\n  checked?: boolean;\n  reversed?: boolean;\n  configPath?: string;\n  disabled?: boolean;\n  label?: string;\n  tip?: string;\n  useSubmit?: boolean;\n  onChange?: (arg: boolean) => void;\n};\n\nexport const ToggleSwitch: FC<ToggleSwitchProps> = ({\n  apiPath,\n  checked,\n  reversed = false,\n  configPath = '',\n  disabled = false,\n  fieldName,\n  label,\n  tip,\n  useSubmit,\n  onChange,\n}) => {\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  let resetTimer = null;\n\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setFieldInConfigState } = serverStatusData || {};\n\n  const resetStates = () => {\n    setSubmitStatus(null);\n    clearTimeout(resetTimer);\n    resetTimer = null;\n  };\n\n  const handleChange = async (isChecked: boolean) => {\n    if (useSubmit) {\n      setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n      const isCheckedSend = reversed ? !isChecked : isChecked;\n\n      await postConfigUpdateToAPI({\n        apiPath,\n        data: { value: isCheckedSend },\n        onSuccess: () => {\n          setFieldInConfigState({ fieldName, value: isCheckedSend, path: configPath });\n          setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n        },\n        onError: (message: string) => {\n          setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${message}`));\n        },\n      });\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n    if (onChange) {\n      onChange(isChecked);\n    }\n  };\n\n  const loading = submitStatus !== null && submitStatus.type === STATUS_PROCESSING;\n  return (\n    <div className=\"formfield-container toggleswitch-container\">\n      {label && (\n        <div className=\"label-side\">\n          <span className=\"formfield-label\">{label}</span>\n        </div>\n      )}\n\n      <div className=\"input-side\">\n        <div className=\"input-group\">\n          <Switch\n            className={`switch field-${fieldName}`}\n            loading={loading}\n            onChange={handleChange}\n            defaultChecked={checked}\n            checked={checked}\n            checkedChildren=\"ON\"\n            unCheckedChildren=\"OFF\"\n            disabled={disabled}\n          />\n          <FormStatusIndicator status={submitStatus} />\n        </div>\n        <p className=\"field-tip\">{tip}</p>\n      </div>\n    </div>\n  );\n};\nexport default ToggleSwitch;\n\nToggleSwitch.defaultProps = {\n  apiPath: '',\n  checked: false,\n  reversed: false,\n  configPath: '',\n  disabled: false,\n  label: '',\n  tip: '',\n  useSubmit: false,\n  onChange: null,\n};\n","import React, { useContext, useState } from 'react';\nimport { Table, Space, Button, Typography, Alert, Input, Form } from 'antd';\nimport dynamic from 'next/dynamic';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\n\nimport { fetchData, UPDATE_STREAM_KEYS } from '../../../../utils/apis';\n\nconst { Paragraph } = Typography;\nconst { Item } = Form;\n\n// Lazy loaded components\n\nconst DeleteOutlined = dynamic(() => import('@ant-design/icons/DeleteOutlined'), {\n  ssr: false,\n});\n\nconst EyeOutlined = dynamic(() => import('@ant-design/icons/EyeOutlined'), {\n  ssr: false,\n});\n\nconst PlusOutlined = dynamic(() => import('@ant-design/icons/PlusOutlined'), {\n  ssr: false,\n});\n\nconst saveKeys = async (keys, setError) => {\n  try {\n    await fetchData(UPDATE_STREAM_KEYS, {\n      method: 'POST',\n      auth: true,\n      data: { value: keys },\n    });\n  } catch (error) {\n    console.error(error);\n    setError(error);\n  }\n};\n\nconst AddKeyForm = ({ setShowAddKeyForm, setFieldInConfigState, streamKeys, setError }) => {\n  const handleAddKey = (newkey: any) => {\n    const updatedKeys = [...streamKeys, newkey];\n\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: updatedKeys,\n    });\n\n    saveKeys(updatedKeys, setError);\n\n    setShowAddKeyForm(false);\n  };\n\n  return (\n    <Form layout=\"inline\" autoComplete=\"off\" onFinish={handleAddKey}>\n      <Item label=\"Key\" name=\"key\" tooltip=\"The key you provide your broadcasting software\">\n        <Input placeholder=\"def456\" />\n      </Item>\n      <Item label=\"Comment\" name=\"comment\" tooltip=\"For remembering why you added this key\">\n        <Input placeholder=\"My OBS Key\" />\n      </Item>\n\n      <Button type=\"primary\" htmlType=\"submit\">\n        Add\n      </Button>\n    </Form>\n  );\n};\n\nconst AddKeyButton = ({ setShowAddKeyForm }) => (\n  <Button type=\"default\" onClick={() => setShowAddKeyForm(true)}>\n    <PlusOutlined />\n  </Button>\n);\n\nconst StreamKeys = () => {\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n  const { streamKeys } = serverConfig;\n  const [showAddKeyForm, setShowAddKeyForm] = useState(false);\n  const [showKeyMap, setShowKeyMap] = useState({});\n  const [error, setError] = useState(null);\n\n  const handleDeleteKey = keyToRemove => {\n    const newKeys = streamKeys.filter(k => k !== keyToRemove);\n    setFieldInConfigState({\n      fieldName: 'streamKeys',\n      value: newKeys,\n    });\n    saveKeys(newKeys, setError);\n  };\n\n  const handleToggleShowKey = key => {\n    setShowKeyMap({\n      ...showKeyMap,\n      [key]: !showKeyMap[key],\n    });\n  };\n\n  const columns = [\n    {\n      title: 'Key',\n      dataIndex: 'key',\n      key: 'key',\n      render: text => (\n        <Space direction=\"horizontal\">\n          <Paragraph copyable>{showKeyMap[text] ? text : '**********'}</Paragraph>\n\n          <Button\n            type=\"link\"\n            style={{ top: '-7px' }}\n            icon={<EyeOutlined />}\n            onClick={() => handleToggleShowKey(text)}\n          />\n        </Space>\n      ),\n    },\n    {\n      title: 'Comment',\n      dataIndex: 'comment',\n      key: 'comment',\n    },\n    {\n      title: '',\n      key: 'delete',\n      render: text => <Button onClick={() => handleDeleteKey(text)} icon={<DeleteOutlined />} />,\n    },\n  ];\n\n  return (\n    <div>\n      <Paragraph>\n        A streaming key is used with your broadcasting software to authenticate itself to Owncast.\n        Most people will only need one. However, if you share a server with others or you want\n        different keys for different broadcasting sources you can add more here.\n      </Paragraph>\n      <Paragraph>\n        These keys are unrelated to the admin password and will not grant you access to make changes\n        to Owncast&apos;s configuration.\n      </Paragraph>\n      <Paragraph>\n        Read more about broadcasting at{' '}\n        <a\n          href=\"https://owncast.online/docs/broadcasting/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          the documentation\n        </a>\n        .\n      </Paragraph>\n\n      <Space direction=\"vertical\" style={{ width: '70%' }}>\n        {error && <Alert type=\"error\" message=\"Saving Keys Error\" description={error} />}\n\n        {streamKeys.length === 0 && (\n          <Alert\n            message=\"No stream keys!\"\n            description=\"You will not be able to stream until you create at least one stream key and add it to your broadcasting software.\"\n            type=\"error\"\n          />\n        )}\n\n        <Table\n          rowKey=\"key\"\n          columns={columns}\n          dataSource={streamKeys}\n          pagination={false}\n          // eslint-disable-next-line react/no-unstable-nested-components\n          footer={() =>\n            showAddKeyForm ? (\n              <AddKeyForm\n                setShowAddKeyForm={setShowAddKeyForm}\n                streamKeys={streamKeys}\n                setFieldInConfigState={setFieldInConfigState}\n                setError={setError}\n              />\n            ) : (\n              <AddKeyButton setShowAddKeyForm={setShowAddKeyForm} />\n            )\n          }\n        />\n        <br />\n      </Space>\n    </div>\n  );\n};\nexport default StreamKeys;\n","import { Popconfirm, Button, Typography } from 'antd';\nimport { FC, useContext, useState } from 'react';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\n\nimport { API_YP_RESET, fetchData } from '../../utils/apis';\nimport { RESET_TIMEOUT } from '../../utils/config-constants';\nimport {\n  createInputStatus,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../utils/input-statuses';\nimport { FormStatusIndicator } from './FormStatusIndicator';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const ResetYP: FC = () => {\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const [submitStatus, setSubmitStatus] = useState(null);\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  const resetDirectoryRegistration = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    try {\n      await fetchData(API_YP_RESET);\n      setMessage('');\n      setSubmitStatus(createInputStatus(STATUS_SUCCESS));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    } catch (error) {\n      setSubmitStatus(createInputStatus(STATUS_ERROR, `There was an error: ${error}`));\n      resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n    }\n  };\n\n  return (\n    <>\n      <Typography.Title level={3} className=\"section-title\">\n        Reset Directory\n      </Typography.Title>\n      <p className=\"description\">\n        If you are experiencing issues with your listing on the Owncast Directory and were asked to\n        &quot;reset&quot; your connection to the service, you can do that here. The next time you go\n        live it will try and re-register your server with the directory from scratch.\n      </p>\n\n      <Popconfirm\n        placement=\"topLeft\"\n        title=\"Are you sure you want to reset your connection to the Owncast directory?\"\n        onConfirm={resetDirectoryRegistration}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      >\n        <Button type=\"primary\">Reset Directory Connection</Button>\n      </Popconfirm>\n      <p>\n        <FormStatusIndicator status={submitStatus} />\n      </p>\n    </>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Button, Collapse, Typography, Tooltip } from 'antd';\nimport dynamic from 'next/dynamic';\nimport { TEXTFIELD_TYPE_NUMBER, TEXTFIELD_TYPE_PASSWORD, TEXTFIELD_TYPE_URL } from './TextField';\nimport { TextFieldWithSubmit } from './TextFieldWithSubmit';\nimport { ServerStatusContext } from '../../utils/server-status-context';\nimport { AlertMessageContext } from '../../utils/alert-message-context';\nimport {\n  TEXTFIELD_PROPS_FFMPEG,\n  TEXTFIELD_PROPS_RTMP_PORT,\n  TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE,\n  TEXTFIELD_PROPS_ADMIN_PASSWORD,\n  TEXTFIELD_PROPS_WEB_PORT,\n} from '../../utils/config-constants';\nimport { UpdateArgs } from '../../types/config-section';\nimport { ResetYP } from './ResetYP';\n\n// Lazy loaded components\n\nconst CopyOutlined = dynamic(() => import('@ant-design/icons/CopyOutlined'), {\n  ssr: false,\n});\n\nconst RedoOutlined = dynamic(() => import('@ant-design/icons/RedoOutlined'), {\n  ssr: false,\n});\n\nconst { Panel } = Collapse;\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditInstanceDetails() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { setMessage } = useContext(AlertMessageContext);\n\n  const { serverConfig } = serverStatusData || {};\n\n  const { adminPassword, ffmpegPath, rtmpServerPort, webServerPort, yp, socketHostOverride } =\n    serverConfig;\n\n  const [copyIsVisible, setCopyVisible] = useState(false);\n\n  const COPY_TOOLTIP_TIMEOUT = 3000;\n\n  useEffect(() => {\n    setFormDataValues({\n      adminPassword,\n      ffmpegPath,\n      rtmpServerPort,\n      webServerPort,\n      socketHostOverride,\n    });\n  }, [serverConfig]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  const showConfigurationRestartMessage = () => {\n    setMessage('Updating server settings requires a restart of your Owncast server.');\n  };\n\n  const showStreamKeyChangeMessage = () => {\n    setMessage(\n      'Changing your stream key will log you out of the admin and block you from streaming until you change the key in your broadcasting software.',\n    );\n  };\n\n  const showFfmpegChangeMessage = () => {\n    if (serverStatusData.online) {\n      setMessage('The updated ffmpeg path will be used when starting your next live stream.');\n    }\n  };\n\n  function generateStreamKey() {\n    let key = '';\n    for (let i = 0; i < 3; i += 1) {\n      key += Math.random().toString(36).substring(2);\n    }\n\n    handleFieldChange({ fieldName: 'streamKey', value: key });\n  }\n\n  function copyStreamKey() {\n    navigator.clipboard.writeText(formDataValues.streamKey).then(() => {\n      setCopyVisible(true);\n      setTimeout(() => setCopyVisible(false), COPY_TOOLTIP_TIMEOUT);\n    });\n  }\n\n  return (\n    <div className=\"edit-server-details-container\">\n      <div className=\"field-container field-streamkey-container\">\n        <div className=\"left-side\">\n          <TextFieldWithSubmit\n            fieldName=\"adminPassword\"\n            {...TEXTFIELD_PROPS_ADMIN_PASSWORD}\n            value={formDataValues.adminPassword}\n            initialValue={adminPassword}\n            type={TEXTFIELD_TYPE_PASSWORD}\n            onChange={handleFieldChange}\n            onSubmit={showStreamKeyChangeMessage}\n          />\n          <div className=\"streamkey-actions\">\n            <Tooltip title=\"Generate a stream key\">\n              <Button icon={<RedoOutlined />} size=\"small\" onClick={generateStreamKey} />\n            </Tooltip>\n\n            <Tooltip\n              className=\"copy-tooltip\"\n              title={copyIsVisible ? 'Copied!' : 'Copy to clipboard'}\n            >\n              <Button icon={<CopyOutlined />} size=\"small\" onClick={copyStreamKey} />\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <TextFieldWithSubmit\n        fieldName=\"ffmpegPath\"\n        {...TEXTFIELD_PROPS_FFMPEG}\n        value={formDataValues.ffmpegPath}\n        initialValue={ffmpegPath}\n        onChange={handleFieldChange}\n        onSubmit={showFfmpegChangeMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"webServerPort\"\n        {...TEXTFIELD_PROPS_WEB_PORT}\n        value={formDataValues.webServerPort}\n        initialValue={webServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <TextFieldWithSubmit\n        fieldName=\"rtmpServerPort\"\n        {...TEXTFIELD_PROPS_RTMP_PORT}\n        value={formDataValues.rtmpServerPort}\n        initialValue={rtmpServerPort}\n        type={TEXTFIELD_TYPE_NUMBER}\n        onChange={handleFieldChange}\n        onSubmit={showConfigurationRestartMessage}\n      />\n      <Collapse className=\"advanced-settings\">\n        <Panel header=\"Advanced Settings\" key=\"1\">\n          <Typography.Paragraph>\n            If you have a CDN in front of your entire Owncast instance, specify your origin server\n            here for the websocket to connect to. Most people will never need to set this.\n          </Typography.Paragraph>\n          <TextFieldWithSubmit\n            fieldName=\"socketHostOverride\"\n            {...TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE}\n            value={formDataValues.socketHostOverride}\n            initialValue={socketHostOverride || ''}\n            type={TEXTFIELD_TYPE_URL}\n            onChange={handleFieldChange}\n          />\n          {yp.enabled && <ResetYP />}\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditInstanceDetails from '../../EditInstanceDetails2';\n\n// eslint-disable-next-line react/function-component-definition\nexport default function ConfigServerDetails() {\n  return (\n    <div className=\"config-server-details-form\">\n      <p className=\"description\">\n        You should change your admin password from the default and keep it safe. For most people\n        it&apos;s likely the other settings will not need to be changed.\n      </p>\n      <div className=\"form-module config-server-details-container\">\n        <EditInstanceDetails />\n      </div>\n    </div>\n  );\n}\n","import { Button, Collapse } from 'antd';\nimport classNames from 'classnames';\nimport React, { useContext, useState, useEffect } from 'react';\nimport { UpdateArgs } from '../../../../types/config-section';\nimport { ServerStatusContext } from '../../../../utils/server-status-context';\nimport { AlertMessageContext } from '../../../../utils/alert-message-context';\n\nimport {\n  postConfigUpdateToAPI,\n  API_S3_INFO,\n  RESET_TIMEOUT,\n  S3_TEXT_FIELDS_INFO,\n} from '../../../../utils/config-constants';\nimport {\n  createInputStatus,\n  StatusState,\n  STATUS_ERROR,\n  STATUS_PROCESSING,\n  STATUS_SUCCESS,\n} from '../../../../utils/input-statuses';\nimport { TextField } from '../../TextField';\nimport { FormStatusIndicator } from '../../FormStatusIndicator';\nimport { isValidUrl } from '../../../../utils/urls';\nimport { ToggleSwitch } from '../../ToggleSwitch';\n\nconst { Panel } = Collapse;\n\n// we could probably add more detailed checks here\n// `currentValues` is what's currently in the global store and in the db\nfunction checkSaveable(formValues: any, currentValues: any) {\n  const {\n    endpoint,\n    accessKey,\n    secret,\n    bucket,\n    region,\n    enabled,\n    servingEndpoint,\n    acl,\n    forcePathStyle,\n  } = formValues;\n  // if fields are filled out and different from what's in store, then return true\n  if (enabled) {\n    if (!!endpoint && isValidUrl(endpoint) && !!accessKey && !!secret && !!bucket && !!region) {\n      if (\n        enabled !== currentValues.enabled ||\n        endpoint !== currentValues.endpoint ||\n        accessKey !== currentValues.accessKey ||\n        secret !== currentValues.secret ||\n        bucket !== currentValues.bucket ||\n        region !== currentValues.region ||\n        (!currentValues.servingEndpoint && servingEndpoint !== '') ||\n        (!!currentValues.servingEndpoint && servingEndpoint !== currentValues.servingEndpoint) ||\n        (!currentValues.acl && acl !== '') ||\n        (!!currentValues.acl && acl !== currentValues.acl) ||\n        forcePathStyle !== currentValues.forcePathStyle\n      ) {\n        return true;\n      }\n    }\n  } else if (enabled !== currentValues.enabled) {\n    return true;\n  }\n  return false;\n}\n\n// eslint-disable-next-line react/function-component-definition\nexport default function EditStorage() {\n  const [formDataValues, setFormDataValues] = useState(null);\n  const [submitStatus, setSubmitStatus] = useState<StatusState>(null);\n\n  const [shouldDisplayForm, setShouldDisplayForm] = useState(false);\n  const serverStatusData = useContext(ServerStatusContext);\n  const { serverConfig, setFieldInConfigState } = serverStatusData || {};\n\n  const { setMessage: setAlertMessage } = useContext(AlertMessageContext);\n\n  const { s3 } = serverConfig;\n  const {\n    accessKey = '',\n    acl = '',\n    bucket = '',\n    enabled = false,\n    endpoint = '',\n    region = '',\n    secret = '',\n    servingEndpoint = '',\n    forcePathStyle = false,\n  } = s3;\n\n  useEffect(() => {\n    setFormDataValues({\n      accessKey,\n      acl,\n      bucket,\n      enabled,\n      endpoint,\n      region,\n      secret,\n      servingEndpoint,\n      forcePathStyle,\n    });\n    setShouldDisplayForm(enabled);\n  }, [s3]);\n\n  if (!formDataValues) {\n    return null;\n  }\n\n  let resetTimer = null;\n  const resetStates = () => {\n    setSubmitStatus(null);\n    resetTimer = null;\n    clearTimeout(resetTimer);\n  };\n\n  // update individual values in state\n  const handleFieldChange = ({ fieldName, value }: UpdateArgs) => {\n    setFormDataValues({\n      ...formDataValues,\n      [fieldName]: value,\n    });\n  };\n\n  // posts the whole state\n  const handleSave = async () => {\n    setSubmitStatus(createInputStatus(STATUS_PROCESSING));\n    const postValue = formDataValues;\n\n    await postConfigUpdateToAPI({\n      apiPath: API_S3_INFO,\n      data: { value: postValue },\n      onSuccess: () => {\n        setFieldInConfigState({ fieldName: 's3', value: postValue, path: '' });\n        setSubmitStatus(createInputStatus(STATUS_SUCCESS, 'Updated.'));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n        setAlertMessage(\n          'Changing your storage configuration will take place the next time you start a new stream.',\n        );\n      },\n      onError: (message: string) => {\n        setSubmitStatus(createInputStatus(STATUS_ERROR, message));\n        resetTimer = setTimeout(resetStates, RESET_TIMEOUT);\n      },\n    });\n  };\n\n  // toggle switch.\n  const handleSwitchChange = (storageEnabled: boolean) => {\n    setShouldDisplayForm(storageEnabled);\n    handleFieldChange({ fieldName: 'enabled', value: storageEnabled });\n  };\n\n  const handleForcePathStyleSwitchChange = (forcePathStyleEnabled: boolean) => {\n    handleFieldChange({ fieldName: 'forcePathStyle', value: forcePathStyleEnabled });\n  };\n\n  const containerClass = classNames({\n    'edit-storage-container': true,\n    'form-module': true,\n    enabled: shouldDisplayForm,\n  });\n\n  const isSaveable = checkSaveable(formDataValues, s3);\n\n  return (\n    <div className={containerClass}>\n      <div className=\"enable-switch\">\n        <ToggleSwitch\n          apiPath=\"\"\n          fieldName=\"enabled\"\n          label=\"Use S3 Storage Provider\"\n          checked={formDataValues.enabled}\n          onChange={handleSwitchChange}\n        />\n        {/* <Switch\n          checked={formDataValues.enabled}\n          defaultChecked={formDataValues.enabled}\n          onChange={handleSwitchChange}\n          checkedChildren=\"ON\"\n          unCheckedChildren=\"OFF\"\n        />{' '}\n        Enabled */}\n      </div>\n\n      <div className=\"form-fields\">\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.endpoint}\n            value={formDataValues.endpoint}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.accessKey}\n            value={formDataValues.accessKey}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.secret}\n            value={formDataValues.secret}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.bucket}\n            value={formDataValues.bucket}\n            onChange={handleFieldChange}\n          />\n        </div>\n        <div className=\"field-container\">\n          <TextField\n            {...S3_TEXT_FIELDS_INFO.region}\n            value={formDataValues.region}\n            onChange={handleFieldChange}\n          />\n        </div>\n\n        <Collapse className=\"advanced-section\">\n          <Panel header=\"Optional Settings\" key=\"1\">\n            <div className=\"field-container\">\n              <TextField\n                {...S3_TEXT_FIELDS_INFO.acl}\n                value={formDataValues.acl}\n                onChange={handleFieldChange}\n              />\n            </div>\n            <div className=\"field-container\">\n              <TextField\n                {...S3_TEXT_FIELDS_INFO.servingEndpoint}\n                value={formDataValues.servingEndpoint}\n                onChange={handleFieldChange}\n              />\n            </div>\n            <div className=\"enable-switch\">\n              <ToggleSwitch\n                {...S3_TEXT_FIELDS_INFO.forcePathStyle}\n                fieldName=\"forcePathStyle\"\n                checked={formDataValues.forcePathStyle}\n                onChange={handleForcePathStyleSwitchChange}\n              />\n            </div>\n          </Panel>\n        </Collapse>\n      </div>\n\n      <div className=\"button-container\">\n        <Button type=\"primary\" onClick={handleSave} disabled={!isSaveable}>\n          Save\n        </Button>\n        <FormStatusIndicator status={submitStatus} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport EditStorage from './EditStorage';\n\n// eslint-disable-next-line react/function-component-definition\nexport default function ConfigStorageInfo() {\n  return (\n    <>\n      <p className=\"description\">\n        Owncast supports optionally using external storage providers to stream your video. Learn\n        more about this by visiting our{' '}\n        <a\n          href=\"https://owncast.online/docs/storage/?source=admin\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storage Documentation\n        </a>\n        .\n      </p>\n      <p className=\"description\">\n        Configuring this incorrectly will likely cause your video to be unplayable. Double check the\n        documentation for your storage provider on how to configure the bucket you created for\n        Owncast.\n      </p>\n      <p className=\"description\">\n        Keep in mind this is for live streaming, not for archival, recording or VOD purposes.\n      </p>\n      <EditStorage />\n    </>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Tabs } from 'antd';\n\nimport StreamKeys from '../../../../components/admin/config/server/StreamKeys';\nimport ServerConfig from '../../../../components/admin/config/server/ServerConfig';\nimport StorageConfig from '../../../../components/admin/config/server/StorageConfig';\n\nimport { AdminLayout } from '../../../../components/layouts/AdminLayout';\n\nexport default function PublicFacingDetails() {\n  return (\n    <div className=\"config-public-details-page\">\n      <Tabs\n        defaultActiveKey=\"1\"\n        centered\n        items={[\n          {\n            label: `Server Config`,\n            key: '1',\n            children: <ServerConfig />,\n          },\n          {\n            label: `Stream Keys`,\n            key: '2',\n            children: <StreamKeys />,\n          },\n          {\n            label: `S3 Object Storage`,\n            key: '3',\n            children: <StorageConfig />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\nPublicFacingDetails.getLayout = function getLayout(page: ReactElement) {\n  return <AdminLayout page={page} />;\n};\n"],"names":["window","__NEXT_P","push","__webpack_require__","ToggleSwitch","apiPath","checked","reversed","configPath","disabled","fieldName","label","tip","useSubmit","onChange","param","submitStatus","setSubmitStatus","useState","resetTimer","serverStatusData","useContext","ServerStatusContext","setFieldInConfigState","resetStates","clearTimeout","handleChange","isChecked","createInputStatus","STATUS_PROCESSING","isCheckedSend","postConfigUpdateToAPI","data","value","onSuccess","path","STATUS_SUCCESS","onError","STATUS_ERROR","concat","message","setTimeout","RESET_TIMEOUT","loading","type","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","div","className","jsx","span","Switch","defaultChecked","checkedChildren","unCheckedChildren","FormStatusIndicator","status","p","defaultProps","Paragraph","Typography","Item","Form","DeleteOutlined","dynamic","Promise","all","e","then","t","bind","ssr","EyeOutlined","PlusOutlined","saveKeys","keys","setError","fetchData","UPDATE_STREAM_KEYS","method","auth","error","console","AddKeyForm","setShowAddKeyForm","streamKeys","handleAddKey","updatedKeys","newkey","jsx_runtime","layout","autoComplete","onFinish","name","tooltip","Input","placeholder","Button","htmlType","AddKeyButton","onClick","StreamKeys","serverConfig","showAddKeyForm","showKeyMap","setShowKeyMap","handleDeleteKey","keyToRemove","newKeys","filter","k","handleToggleShowKey","key","a","href","target","rel","Space","direction","style","width","Alert","description","length","Table","rowKey","columns","title","dataIndex","render","text","copyable","top","icon","dataSource","pagination","footer","br","ResetYP","setMessage","AlertMessageContext","resetDirectoryRegistration","API_YP_RESET","Fragment","level","Popconfirm","placement","onConfirm","okText","cancelText","CopyOutlined","RedoOutlined","Panel","Collapse","EditInstanceDetails","formDataValues","setFormDataValues","adminPassword","ffmpegPath","rtmpServerPort","webServerPort","yp","socketHostOverride","copyIsVisible","setCopyVisible","useEffect","handleFieldChange","showConfigurationRestartMessage","showStreamKeyChangeMessage","showFfmpegChangeMessage","online","TextFieldWithSubmit","TEXTFIELD_PROPS_ADMIN_PASSWORD","initialValue","TEXTFIELD_TYPE_PASSWORD","onSubmit","Tooltip","size","i","Math","random","toString","substring","navigator","clipboard","writeText","streamKey","TEXTFIELD_PROPS_FFMPEG","TEXTFIELD_PROPS_WEB_PORT","TEXTFIELD_TYPE_NUMBER","TEXTFIELD_PROPS_RTMP_PORT","header","TEXTFIELD_PROPS_SOCKET_HOST_OVERRIDE","TEXTFIELD_TYPE_URL","enabled","ConfigServerDetails","EditStorage","shouldDisplayForm","setShouldDisplayForm","setAlertMessage","s3","accessKey","acl","bucket","endpoint","region","secret","servingEndpoint","forcePathStyle","handleSave","API_S3_INFO","handleSwitchChange","storageEnabled","handleForcePathStyleSwitchChange","forcePathStyleEnabled","containerClass","classNames","isSaveable","checkSaveable","formValues","currentValues","isValidUrl","TextField","S3_TEXT_FIELDS_INFO","ConfigStorageInfo","PublicFacingDetails","Tabs","defaultActiveKey","centered","items","children","ServerConfig","StorageConfig","getLayout","page","AdminLayout"],"sourceRoot":""}